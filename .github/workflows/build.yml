name: build

on:
  push:
    branches:
      - cgns
      - cgns-online

env:
  # CMAKE directories
  SOURCE_DIR: main
  BUILD_DIR: build

  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

  # github API url
  IRICLIB_API_URL: https://api.github.com/repos/scharlton2/iriclib    # @todo change to i-RIC/iriclib
  # oneAPI
  # Based on https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17762/w_HPCKit_p_2021.2.0.2901.exe
  WINDOWS_HPCKIT_FILE: hpckit.exe
  WINDOWS_HPCKIT_COMPONENTS: intel.oneapi.win.ifort-compiler

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:

    - name: Debug before checkout with path
      run: |
        Get-Command cmake
        Get-Command 7z
        Get-Command curl
        echo ${{github.workspace}}
        echo ${{runner.workspace}}

    - uses: actions/checkout@v2
      with:
        path: ${{env.SOURCE_DIR}}

    - name: Debug after checkout with path
      run: |
        echo ${{github.workspace}}
        echo ${{runner.workspace}}
        dir env:

    - name: Cache install
      id: cache-install
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/${{env.BUILD_DIR}}/INSTALL
        key: ${{runner.os}}-install

    - name: Download latest iricsdk
      shell: pwsh
      run: |
        # GET /repos/{owner}/{repo}/releases/latest
        # see https://docs.github.com/en/rest/reference/repos#get-the-latest-release
        # see https://docs.github.com/ja/rest/reference/repos#get-the-latest-release
        $latest = (Invoke-WebRequest -Uri $env:IRICLIB_API_URL/releases/latest -Method GET).Content | ConvertFrom-Json
        $url = ($latest.assets | Where-Object {$_.name -match "^iricsdk-(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)\.zip$"}).browser_download_url
        curl -LO $url
        mkdir c:\iricdev\lib
        $zipfile = $matches[0]
        7z x -oC:\iricdev\lib $zipfile
        del $zipfile
        # export environment variable IRICLIB_VERSION for later steps
        Write-Output "IRICLIB_VERSION=$($matches.major).$($matches.minor).$($matches.patch)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Install oneAPI Fortran
      shell: cmd
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: |
        curl -fSLo %WINDOWS_HPCKIT_FILE% %WINDOWS_HPCKIT_URL%
        start /b /wait %WINDOWS_HPCKIT_FILE% -s -x -f hpckit_extracted --log hpckit_extracted.log
        hpckit_extracted\bootstrapper.exe -s --action install --components=%WINDOWS_HPCKIT_COMPONENTS% --eula=accept --continue-with-optional-error=yes -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=1 --log-dir=.

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: cmake -S ${{github.workspace}}/${{env.SOURCE_DIR}} -B ${{github.workspace}}/${{env.BUILD_DIR}} -DCMAKE_PREFIX_PATH=C:/iricdev/lib/install/iriclib-${{env.IRICLIB_VERSION}}/lib/cmake/iriclib -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_DIR}}/INSTALL

    - name: Build
      # Build your program with the given configuration
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: cmake --build ${{github.workspace}}/${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}}

    # @todo
    # - name: Test
    #   working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: |
    #     "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019
    #     ctest -C ${{env.BUILD_TYPE}}

    - name: Debug before
      run: tree /A ..

    - name: Checkout online_update repo
      uses: actions/checkout@v2
      with:
        repository: scharlton2/online_update
        path: online_update

    - name: Debug after
      run: tree /A ..

    - name: Install
      # Build your program with the given configuration
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: cmake --build ${{github.workspace}}/${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}} --target install
